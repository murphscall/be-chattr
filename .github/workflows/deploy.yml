name: Deploy to AWS

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: 애플리케이션 빌드 (테스트 제외)
        run: ./gradlew build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chattr:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chattr:latest

      - name: AWS 서버에 배포 및 상태 확인
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          script: |
            docker compose down || true

            curl -o docker-compose.yml https://raw.githubusercontent.com/murphscall/be-chattr/master/docker-compose.yml

            
            # 3. .env 파일 생성
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            export SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            export SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}
            export SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}
            export DB_URL=${{ secrets.DB_URL }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASS=${{ secrets.DB_PASS }}
            export REDIS_HOST=${{ secrets.REDIS_HOST }}
            export REDIS_PORT=${{ secrets.REDIS_PORT }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }}
            export KAKAO_CLIENT_ID=${{ secrets.KAKA_CLIENT_ID }}
            export KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            export KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            export GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            
            # 4. 최신 이미지 다운로드 후 컨테이너 실행 (명령어 수정: docker-compose -> docker compose)
            docker compose pull
            docker compose up -d
            
            # 5. 불필요한 이전 이미지 정리
            docker image prune -f

            # 6. 배포 상태 확인 (명령어 수정: docker-compose -> docker compose)
            echo "✅ 배포 완료! 컨테이너 상태를 확인합니다."
            echo "========================================"
            docker compose ps
            echo "========================================"