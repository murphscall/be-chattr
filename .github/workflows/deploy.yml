name: Deploy to AWS

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러 오기
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: 애플리케이션 빌드 (테스트 제외)
        run: ./gradlew build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chattr:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chattr:latest

      - name: SCP로 EC2에 docker-compose.yml 전송 하기
        uses: appleboy/scp-action@v0.1.7 # scp 전송을 쉽게할 수 있는 라이브러리
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          source: docker-compose.yml
          target: /home/ubuntu/be-chattr

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          DB_PASS : ${{ secrets.DB_PASS }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          envs: DB_PASS, DOCKER_USERNAME, DOCKER_PASSWORD
          script_stop: true
          script: |
            cd /home/ubuntu/be-chattr
            
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker compose down || true
            
            # 4. 최신 이미지 다운로드 후 컨테이너 실행 
            docker compose pull
            docker compose up -d
            
            # 5. 불필요한 이전 이미지 정리
            docker image prune -f

            # 6. 배포 상태 확인 
            echo "배포 완료 컨테이너 상태 확인"
            echo "========================================"
            docker compose ps
            echo "========================================"